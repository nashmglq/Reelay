generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @unique @default(autoincrement())
  name       String  @db.VarChar(60)
  email      String  @unique @db.VarChar(60)
  googleId   String  @unique @db.VarChar(255)
  profilePic String?
  ticket     Int     @default(30)
  admin       Boolean @default(false)

  chat     Chat[]
  genText  GenText[]
  genImage GenImage[]

  @@map("user")
}

model Chat {
  id               String   @id @unique @default(uuid())
  title            String   @unique @db.VarChar(60)
  dateLastModified DateTime
  createdAt        DateTime
  platform         String[] @db.VarChar(60)
  typeOfChat       String[] @db.VarChar(60)
  scriptType       String?  @db.VarChar(60)
  userId           Int
  user_id          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  genText  GenText[]
  genImage GenImage[]

  // @@fulltext([title])
  @@map("chat")
}

model GenText {
  id      Int    @id @unique @default(autoincrement())
  prompt  String @db.VarChar(1000)
  content String @db.VarChar(15000)
  chatId  String
  chat_id Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId  Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("genText")
}

model GenImage {
  image_id       Int     @id @unique @default(autoincrement())
  thumbnailImage String?
  chatId         String
  chat_id        Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId         Int
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("genImage")
}
